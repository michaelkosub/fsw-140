// create database bob_ross;
// use bob_ross;

// SELECT * FROM elements WHERE title LIKE '%CLIFF%'
// UNION
// SELECT * FROM elements WHERE title LIKE '%HILLS%';

// SELECT EPISODE, TITLE FROM ELEMENTS WHERE EPISODE IN (
// 	SELECT EPISODE FROM ELEMENTS WHERE TREES = 1)
    
// -- 3. -- Order of operation of queries:
// SELECT EPISODE, TITLE FROM ELEMENTS WHERE EPISODE IN (
// 	SELECT EPISODE FROM ELEMENTS WHERE TREES = 1
// );

// -- IN THIS QUERY, (same as #2) the first thing that gets ran in the query is the 'FROM' keyword,
// -- so it knows which table to access. Then, the second thing that gets ran in 
// -- the query is the 'WHERE' keyword because it will filter the results needed to be read. 
// -- Finally, the last thing that gets ran in this query is the 'SELECT' keyword which tells 
// -- the database which columns to send back.   
 
// CREATE TABLE SEASON_ONE(EPISODE VARCHAR(25) NOT NULL);
// 	INSERT INTO SEASON_ONE (EPISODE)
// 	SELECT EPISODE FROM ELEMENTS WHERE EPISODE LIKE 'S01%'; 
// 	SELECT * FROM SEASON_ONE;
    
// ALTER TABLE SEASON_ONE ADD COLUMN TITLE VARCHAR(50) not null;

// USE SALESORDERS;
// SELECT CONCAT(CUSTFIRSTNAME, " ", CUSTLASTNAME) AS 'Full Name',  SHIPDATE, ORDERDATE FROM CUSTOMERS
// JOIN ORDERS ON  ORDERS.CUSTOMERID = CUSTOMERS.CUSTOMERID;

// SELECT PRODUCTNAME, VENDNAME, WHOLESALEPRICE 
// FROM PRODUCT_VENDORS 
// INNER JOIN VENDORS 
// 	ON  VENDORS.VENDORID = PRODUCT_VENDORS.VENDORID 
// INNER JOIN PRODUCTS 
// 	ON PRODUCTS.PRODUCTNUMBER = PRODUCT_VENDORS.PRODUCTNUMBER
// GROUP BY PRODUCTNAME ORDER BY PRODUCTNAME;